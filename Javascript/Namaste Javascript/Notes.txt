
Lecture: 01

Everything in javascript happens inside an execution context
It is like a big box and it has two components
    1. Memory component or variable environment where all the function and variable are stored as key value pair
    2. Code component or thread of execution in which code is executed line by line 

Javascript is synchronous single threaded language , it means it will execute only one line at a time    

Lecture: 02

var n = 2 ; 
function square(num) {
    return num*num;
}
var square2 = square(n);
var square4 = square(4);

Before a single line will execute , a global execution context is made. This execution context is created in two phases.
    First phase is also known as memory creation phase.
    In first phase, it will allocate memory to 'n' and store value of undefined and in case of function it stores the whole code 
    Second phase is code execution phase.
    Now,javascript once again runs through whole javascipt program line by line(All calculation is done).
    Now as soon as first line is executed it will place value of n at the place of undefined, and from line 2 to 5 there is nothing to executed



    var n =2;
    function square(num){
        var ans = num*num;
        return ans;
    }
    var square2 = square(2);
    var square4 = square(4);


As soon as function is invoked a new global execution context is created and it also has two phase.
    In first phase memory is allocated to parameter and variable , it will allow memory to num as well
    In second phase, the value of num is first passed to num , then in code phase num*num is calculated and then undefined of ans is replaced with value


Return meaning is to return the control of the program from where it was invoked and as soon as we encounter return the instance of execution context is deleted

Once the whole javascript code is finished its execution , the global execution is deleted
